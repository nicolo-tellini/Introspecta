#    dev.off()
} # chromosome loop
warnings()
rm(list = ls())
gc()
gcinfo(FALSE)
options(warn = 1)
options(stringsAsFactors = F)
options(scipen=999)
argsVal <- commandArgs(trailingOnly = T)
BaseDir <- argsVal[1]
ref1 <- "Scc"
BaseDir <- "/home/nico/testExploratorypipeline"
library(ggplot2)
ListFiles <- list.files(path =  paste0(BaseDir,"/LOH/AllSegments"), pattern = ".RData" )
ListFiles
LOHTab <- data.frame()
for (ind in ListFiles) {
load(file = paste0(BaseDir,"/LOH/AllSegments/",ind))
LOHTab <- as.data.frame(rbind(LOHTab,allEv))
rm(allEv)
}
centromeric <- read.delim(paste0(BaseDir,"/Rep/Ann/Scc.centromere.txt"), header=FALSE)
chrlen <- read.delim(paste0(BaseDir,"/Rep/Ann/Scc.chrs.txt"), header=FALSE)
if (nrow(chrlen) == 17) {
chrlen <- chrlen[-nrow(chrlen),]
}
samples <- as.character(unique(LOHTab$hybrid))
yminimi <- seq(from=0, to=7.5, by=0.5)
ymassimi <- seq(from=0.25, to=7.75, by=0.5)
emptytab <- as.data.frame(matrix(ncol=2,nrow = nrow(LOHTab)))
LOHTab <- cbind(LOHTab,emptytab)
colnames(LOHTab)[18:19] <- c("ymin","ymax")
z <- c("chrI", "chrII", "chrIII", "chrIV", "chrV", "chrVI", "chrVII", "chrVIII","chrIX","chrX","chrXI", "chrXII", "chrXIII", "chrXIV", "chrXV", "chrXVI")
LOHTab$chr <- factor(LOHTab$chr, levels=z)
LOHTab <- LOHTab[order(match(LOHTab[[1]], z)), ]
ymin <- 0
ymax <- 0.25
for (indc in z) {
LOHTab[LOHTab[,1] == indc,"ymin"] <- ymin
LOHTab[LOHTab[,1] == indc,"ymax"] <- ymax
ymin <- ymin + 0.5
ymax <- ymax + 0.5
}
rm(ymin,ymax,emptytab)
levels(LOHTab$color)[2] <- "grey5"
# # # # # # # # # # # # # # # # # # # # # #
# Plottare tutti i cromosomi per campione #
# # # # # # # # # # # # # # # # # # # # # #
# Status: complete
# Opening ----
rm(list = ls())
gc()
gcinfo(FALSE)
options(warn = 1)
options(stringsAsFactors = F)
options(scipen=999)
# Dirs ----
# BaseDir <- "/home/nico/workDir/S.c.brazilian.strain.sampaio"
argsVal <- commandArgs(trailingOnly = T)
BaseDir <- argsVal[1]
ref1 <- "Scc"
BaseDir <- "/home/nico/testExploratorypipeline"
# Libraries ----
library(ggplot2)
# Table ----
ListFiles <- list.files(path =  paste0(BaseDir,"/LOH/AllSegments"), pattern = ".RData" )
LOHTab <- data.frame()
for (ind in ListFiles) {
load(file = paste0(BaseDir,"/LOH/AllSegments/",ind))
LOHTab <- as.data.frame(rbind(LOHTab,allEv))
rm(allEv)
}
centromeric <- read.delim(paste0(BaseDir,"/Rep/Ann/Scc.centromere.txt"), header=FALSE)
chrlen <- read.delim(paste0(BaseDir,"/Rep/Ann/Scc.chrs.txt"), header=FALSE)
if (nrow(chrlen) == 17) {
chrlen <- chrlen[-nrow(chrlen),]
}
samples <- as.character(unique(LOHTab$hybrid))
yminimi <- seq(from=0, to=7.5, by=0.5)
ymassimi <- seq(from=0.25, to=7.75, by=0.5)
emptytab <- as.data.frame(matrix(ncol=2,nrow = nrow(LOHTab)))
LOHTab <- cbind(LOHTab,emptytab)
colnames(LOHTab)[18:19] <- c("ymin","ymax")
z <- c("chrI", "chrII", "chrIII", "chrIV", "chrV", "chrVI", "chrVII", "chrVIII","chrIX","chrX","chrXI", "chrXII", "chrXIII", "chrXIV", "chrXV", "chrXVI")
LOHTab$chr <- factor(LOHTab$chr, levels=z)
LOHTab <- LOHTab[order(match(LOHTab[[1]], z)), ]
ymin <- 0
ymax <- 0.25
for (indc in z) {
LOHTab[LOHTab[,1] == indc,"ymin"] <- ymin
LOHTab[LOHTab[,1] == indc,"ymax"] <- ymax
ymin <- ymin + 0.5
ymax <- ymax + 0.5
}
rm(ymin,ymax,emptytab)
levels(LOHTab$color)
rm(list = ls())
gc()
gcinfo(FALSE)
options(warn = 1)
options(stringsAsFactors = F)
options(scipen=999)
# Dirs ----
# BaseDir <- "/home/nico/workDir/S.c.brazilian.strain.sampaio"
argsVal <- commandArgs(trailingOnly = T)
BaseDir <- argsVal[1]
ref1 <- "Scc"
BaseDir <- "/home/nico/testExploratorypipeline"
# Libraries ----
library(ggplot2)
# Table ----
ListFiles <- list.files(path =  paste0(BaseDir,"/LOH/AllSegments"), pattern = ".RData" )
LOHTab <- data.frame()
for (ind in ListFiles) {
load(file = paste0(BaseDir,"/LOH/AllSegments/",ind))
LOHTab <- as.data.frame(rbind(LOHTab,allEv))
rm(allEv)
}
levels(LOHTab$color)
View(LOHTab)
rm(list = ls())
options(stringsAsFactors = F)
# arguments
argsVal <- commandArgs(trailingOnly = T)
ref1Label <- argsVal[1]
ref2Label <- argsVal[2]
ref1 <- argsVal[3]
ref2 <- argsVal[4]
baseDir <- argsVal[5]
allChr <- c("chrI", "chrII", "chrIII", "chrIV", "chrV", "chrVI", "chrVII", "chrVIII",
"chrIX", "chrX", "chrXI", "chrXII", "chrXIII", "chrXIV", "chrXV", "chrXVI")
rm(list = ls())
options(stringsAsFactors = F)
# arguments
argsVal <- commandArgs(trailingOnly = T)
ref1Label <- argsVal[1]
ref2Label <- argsVal[2]
ref1 <- argsVal[3]
ref2 <- argsVal[4]
baseDir <- argsVal[5]
# commentami
baseDir <- "/home/nico/testExploratorypipeline"
ref1 <- "Scc"
ref2 <- "EU"
ref1Label <- "Scc"
ref2Label <- "CBS432"
allChr <- c("chrI", "chrII", "chrIII", "chrIV", "chrV", "chrVI", "chrVII", "chrVIII",
"chrIX", "chrX", "chrXI", "chrXII", "chrXIII", "chrXIV", "chrXV", "chrXVI")
markFile <- file.path(baseDir, "LOH", "Markers", paste0("Markers.", ref1, "-", ref2, ".RData"))
markFile
# carica dfGG
load(file = markFile)
# conta tutti i marker
nMarker <- nrow(dfGG)
# output statistics file
fileStat <- file.path(baseDir, "LOH", "Markers", paste0("Stat.Markers.", ref1, "-", ref2, ".txt"))
# output file for intra-chromosome translocation
fileOutIntraTransloc <- file.path(baseDir, "LOH", "Markers", paste0("IntraChrom.Translocation.Markers.", ref1, "-", ref2, ".txt"))
cat(colnames(dfGG), "\n", file = fileOutIntraTransloc, sep = "\t")
chrLenRef1 <- read.table(file = file.path(baseDir, "CNV", "GCdata", ref1Label, "LenChr.txt"), header = F, sep = "\t")[, 3]
chrLenRef2 <- read.table(file = file.path(baseDir, "CNV", "GCdata", ref2Label, "LenChr.txt"), header = F, sep = "\t")[, 3]
dfChrLen <- data.frame(chrLenRef1, chrLenRef2)
# inter-chromosome translocation e salva
indInterChromTransloc <- which(dfGG[, 1] != dfGG[, 3] & dfGG[, 7] == 1 & dfGG[, 8] == 1)
nInterChromTransloc <- length(indInterChromTransloc)
fileOutInterTransloc <- file.path(baseDir, "LOH", "Markers", paste0("InterChrom.Translocation.Markers.", ref1, "-", ref2, ".txt"))
write.table(x = dfGG[indInterChromTransloc, ], file = fileOutInterTransloc,
col.names = T, row.names = F, quote = F, append = F, sep = "\t")
# inter-chromosome inversion
indInterChromInversion <- which(dfGG[, 1] != dfGG[, 3] & (dfGG[, 7] == -1 | dfGG[, 8] == -1))
nInterChromInversion <- length(indInterChromInversion)
fileOutInterInversion <- file.path(baseDir, "LOH", "Markers", paste0("InterChrom.Inversion.Markers.", ref1, "-", ref2, ".txt"))
write.table(x = dfGG[indInterChromInversion, ], file = fileOutInterInversion,
col.names = T, row.names = F, quote = F, append = F, sep = "\t")
# intra-chromosome inversion
indIntraChromInversion <- which(dfGG[, 1] == dfGG[, 3] & (dfGG[, 7] == -1 | dfGG[, 8] == -1))
nIntraChromInversion <- length(indIntraChromInversion)
fileOutIntraInversion <- file.path(baseDir, "LOH", "Markers", paste0("IntraChrom.Inversion.Markers.", ref1, "-", ref2, ".txt"))
write.table(x = dfGG[indIntraChromInversion, ], file = fileOutIntraInversion,
col.names = T, row.names = F, quote = F, append = F, sep = "\t")
# filter out all
indOut <- c(indInterChromTransloc, indInterChromInversion, indIntraChromInversion)
nInvInterChromTrans <- length(indOut)
if (nInvInterChromTrans != 0) {
# in dfGGFilt tutti i marker mappano sullo stesso chrom
dfGGFilt <- dfGG[-indOut, ]
}
# by chromosome, by reference (there's NO inter-chromosome marker!)
counterChr <- 1
nMarkerIntraChromTransloc <- 0
for (indC in allChr) {
# puoi pescare il chrom giusto sulla base di un solo reference, mitico!
dfGGFiltChr <- dfGGFilt[which(dfGGFilt[, 1] == indC), ]
# indici delle colonne delle posizioni nei due reference
for (indRefCol in c(2, 4)) {
vctPos <- dfGGFiltChr[, indRefCol]
# add chromosome start & end
vcfPos <- c(1, vctPos, dfChrLen[counterChr, indRefCol / 2])
# trans1: 9,10,11
# trans2: 19,20,21,22
# vctPos <- c(1,3,5,8,12,34,36,38,23,26,28,44,48,54,58,100,110,115,82,88,90,92,200)
# chiaramente becca anche le traslocazioni con un solo marker
indDiff <- which(diff(vctPos) < 0)
nTransloc <- length(indDiff)
if (nTransloc != 0) {
indStartTransloc <- indDiff + 1
indEndTransloc <- numeric(length = nTransloc)
for (indS in c(1:nTransloc)) {
lastMarker <- which(vctPos > vctPos[indDiff[indS]])[1] - 1
# se la traslocazione è alla fine del cromosoma lastMarler = NA
if (is.na(lastMarker)) {
indEndTransloc[indS] <- vctPos[length(vctPos)]
} else {
indEndTransloc[indS] <- lastMarker
}
dfIntraTransloc <- dfGGFiltChr[c(c(indStartTransloc[indS] - 1):c(indEndTransloc[indS] + 1)), ]
# la tabella IntraChrom.Translocation.Markers contiene anche i marker
# upstream e downstream, tranne quando la traslocazione è alla fine del cromosoma
# (quindi il marker downstream non esiste)
write.table(x = dfIntraTransloc, file = fileOutIntraTransloc,
col.names = F, row.names = F, quote = F, append = T, sep = "\t")
}
nMarkerIntraChromTransloc <- nMarkerIntraChromTransloc + sum(indEndTransloc - indStartTransloc + 1)
}
}
counterChr <- counterChr + 1
}
nStructural <- nInvInterChromTrans + nMarkerIntraChromTransloc
nSequence <- (nMarker - nStructural)
fStructural <- signif(nStructural / nMarker, digits = 5)
fSequence <- signif(nSequence / nMarker, digits = 5)
cat("Seq: ", fSequence, "\n", file = fileStat, append = F)
cat("Str: ", fStructural, "\n", file = fileStat, append = T)
cat("N Marker: ", nMarker, "\n", file = fileStat, append = T)
cat("Mean Marker Density [1/kb]:",
signif((1 / sum(dfChrLen$chrLenRef1) + 1 / sum(dfChrLen$chrLenRef2)) * nMarker * 1E3 / 2, digits = 5),
file = fileStat, append = T)
# header ------------------------------------------------------------------
# suddivide i marker in 4 categorie:
# traslocazioni/inversioni intra/inter-cromosoma
# e salva 4 tabelle
# calcola le frazioni di sequence & structural divergence
# va lanciato dopo Clrs
# perché legge le posizioni marker filtrate
# OCCHIO
# la tabella IntraChrom.Translocation.Markers contiene anche i marker
# upstream e downstream, tranne quando la traslocazione è alla fine del cromosoma
# (quindi il marker downstream non esiste)
rm(list = ls())
options(stringsAsFactors = F)
# settings ----------------------------------------------------------------
# arguments
argsVal <- commandArgs(trailingOnly = T)
ref1Label <- argsVal[1]
ref2Label <- argsVal[2]
ref1 <- argsVal[3]
ref2 <- argsVal[4]
baseDir <- argsVal[5]
# commentami
baseDir <- "/home/nico/testExploratorypipeline"
ref1 <- "Scc"
ref2 <- "EU"
ref1Label <- "Scc"
ref2Label <- "CBS432"
allChr <- c("chrI", "chrII", "chrIII", "chrIV", "chrV", "chrVI", "chrVII", "chrVIII",
"chrIX", "chrX", "chrXI", "chrXII", "chrXIII", "chrXIV", "chrXV", "chrXVI")
markFile <- file.path(baseDir, "LOH", "Markers", paste0("Markers.", ref1, "-", ref2, ".RData"))
# carica dfGG
load(file = markFile)
# conta tutti i marker
nMarker <- nrow(dfGG)
# output statistics file
fileStat <- file.path(baseDir, "LOH", "Markers", paste0("Stat.Markers.", ref1, "-", ref2, ".txt"))
# output file for intra-chromosome translocation
fileOutIntraTransloc <- file.path(baseDir, "LOH", "Markers", paste0("IntraChrom.Translocation.Markers.", ref1, "-", ref2, ".txt"))
cat(colnames(dfGG), "\n", file = fileOutIntraTransloc, sep = "\t")
chrLenRef1 <- read.table(file = file.path(baseDir, "CNV", "GCdata", ref1Label, "LenChr.txt"), header = F, sep = "\t")[, 3]
chrLenRef2 <- read.table(file = file.path(baseDir, "CNV", "GCdata", ref2Label, "LenChr.txt"), header = F, sep = "\t")[, 3]
dfChrLen <- data.frame(chrLenRef1, chrLenRef2)
# inter-chromosome translocation e salva
indInterChromTransloc <- which(dfGG[, 1] != dfGG[, 3] & dfGG[, 7] == 1 & dfGG[, 8] == 1)
nInterChromTransloc <- length(indInterChromTransloc)
fileOutInterTransloc <- file.path(baseDir, "LOH", "Markers", paste0("InterChrom.Translocation.Markers.", ref1, "-", ref2, ".txt"))
write.table(x = dfGG[indInterChromTransloc, ], file = fileOutInterTransloc,
col.names = T, row.names = F, quote = F, append = F, sep = "\t")
# inter-chromosome inversion
indInterChromInversion <- which(dfGG[, 1] != dfGG[, 3] & (dfGG[, 7] == -1 | dfGG[, 8] == -1))
nInterChromInversion <- length(indInterChromInversion)
fileOutInterInversion <- file.path(baseDir, "LOH", "Markers", paste0("InterChrom.Inversion.Markers.", ref1, "-", ref2, ".txt"))
write.table(x = dfGG[indInterChromInversion, ], file = fileOutInterInversion,
col.names = T, row.names = F, quote = F, append = F, sep = "\t")
# intra-chromosome inversion
indIntraChromInversion <- which(dfGG[, 1] == dfGG[, 3] & (dfGG[, 7] == -1 | dfGG[, 8] == -1))
nIntraChromInversion <- length(indIntraChromInversion)
fileOutIntraInversion <- file.path(baseDir, "LOH", "Markers", paste0("IntraChrom.Inversion.Markers.", ref1, "-", ref2, ".txt"))
write.table(x = dfGG[indIntraChromInversion, ], file = fileOutIntraInversion,
col.names = T, row.names = F, quote = F, append = F, sep = "\t")
# filter out all
indOut <- c(indInterChromTransloc, indInterChromInversion, indIntraChromInversion)
nInvInterChromTrans <- length(indOut)
if (nInvInterChromTrans != 0) {
# in dfGGFilt tutti i marker mappano sullo stesso chrom
dfGGFilt <- dfGG[-indOut, ]
}
# by chromosome, by reference (there's NO inter-chromosome marker!)
counterChr <- 1
nMarkerIntraChromTransloc <- 0
for (indC in allChr) {
# puoi pescare il chrom giusto sulla base di un solo reference, mitico!
dfGGFiltChr <- dfGGFilt[which(dfGGFilt[, 1] == indC), ]
# indici delle colonne delle posizioni nei due reference
for (indRefCol in c(2, 4)) {
vctPos <- dfGGFiltChr[, indRefCol]
# add chromosome start & end
vcfPos <- c(1, vctPos, dfChrLen[counterChr, indRefCol / 2])
# trans1: 9,10,11
# trans2: 19,20,21,22
# vctPos <- c(1,3,5,8,12,34,36,38,23,26,28,44,48,54,58,100,110,115,82,88,90,92,200)
# chiaramente becca anche le traslocazioni con un solo marker
indDiff <- which(diff(vctPos) < 0)
nTransloc <- length(indDiff)
if (nTransloc != 0) {
indStartTransloc <- indDiff + 1
indEndTransloc <- numeric(length = nTransloc)
for (indS in c(1:nTransloc)) {
lastMarker <- which(vctPos > vctPos[indDiff[indS]])[1] - 1
# se la traslocazione è alla fine del cromosoma lastMarler = NA
if (is.na(lastMarker)) {
indEndTransloc[indS] <- vctPos[length(vctPos)]
} else {
indEndTransloc[indS] <- lastMarker
}
dfIntraTransloc <- dfGGFiltChr[c(c(indStartTransloc[indS] - 1):c(indEndTransloc[indS] + 1)), ]
# la tabella IntraChrom.Translocation.Markers contiene anche i marker
# upstream e downstream, tranne quando la traslocazione è alla fine del cromosoma
# (quindi il marker downstream non esiste)
write.table(x = dfIntraTransloc, file = fileOutIntraTransloc,
col.names = F, row.names = F, quote = F, append = T, sep = "\t")
}
nMarkerIntraChromTransloc <- nMarkerIntraChromTransloc + sum(indEndTransloc - indStartTransloc + 1)
}
}
counterChr <- counterChr + 1
}
nStructural <- nInvInterChromTrans + nMarkerIntraChromTransloc
nSequence <- (nMarker - nStructural)
fStructural <- signif(nStructural / nMarker, digits = 5)
fSequence <- signif(nSequence / nMarker, digits = 5)
cat("Seq: ", fSequence, "\n", file = fileStat, append = F)
cat("Str: ", fStructural, "\n", file = fileStat, append = T)
cat("N Marker: ", nMarker, "\n", file = fileStat, append = T)
cat("Mean Marker Density [1/kb]:",
signif((1 / sum(dfChrLen$chrLenRef1) + 1 / sum(dfChrLen$chrLenRef2)) * nMarker * 1E3 / 2, digits = 5),
file = fileStat, append = T)
View(dfGG)
View(dfChrLen)
View(dfGGFilt)
View(dfGGFiltChr)
View(dfIntraTransloc)
rm(list = ls())
options(stringsAsFactors = F)
library(ggplot2)
library(scales)
# arguments
argsVal <- commandArgs(trailingOnly = T)
# header ------------------------------------------------------------------
# makes segments plots for all samples by chromosome
# and saves all samples data by chromosome (for heat maps)
# [salva anche gli eventi status 2 ma li filtro dopo negli Heat.R]
# creates folder "AllSegments" for output pdfs
# and SE, FL subfolders for plots
# if plotSeg is TRUE
# makes all samples plots
# questa riga non serve a nulla
# very peculiar stuff:
# length(chromStartNA) -> 1
# length(chromStartWE) -> 16
rm(list = ls())
options(stringsAsFactors = F)
library(ggplot2)
library(scales)
# settings ----------------------------------------------------------------
# arguments
argsVal <- commandArgs(trailingOnly = T)
ref1Label <- argsVal[1]
ref2Label <- argsVal[2]
ref1 <- argsVal[3]
ref2 <- argsVal[4]
baseDir <- argsVal[5]
ref1Label <- "Scc"
ref2Label <- "CBS432"
ref1 <- "Scc"
ref2 <- "EU"
baseDir <- "/home/nico/testExploratorypipeline"
# init
# to plot or not to plot? this is the question
plotSeg <- F
# input folder
dirData <- file.path(baseDir, "LOH")
# main output folder
dirName <- "AllSegments"
outDirHis <- file.path(dirData, dirName, "HistoLength")
outDirData <- file.path(dirData, dirName)
if (plotSeg) {
outDirFL <- file.path(dirData, dirName, "FL")
outDirSE <- file.path(dirData, dirName, "SE")
dir.create(path = outDirFL, showWarnings = F, recursive = T)
dir.create(path = outDirSE, showWarnings = F, recursive = T)
}
dir.create(path = outDirHis, showWarnings = F, recursive = T)
summaryCsv <- file.path(outDirData, paste("AllEvents", "csv", sep = "."))
summaryCsv
if (file.exists(summaryCsv)) file.remove(summaryCsv)
allChr <- c("chrI", "chrII", "chrIII", "chrIV", "chrV", "chrVI", "chrVII", "chrVIII",
"chrIX", "chrX", "chrXI", "chrXII", "chrXIII", "chrXIV", "chrXV", "chrXVI")
# centromeri, (sub)telomeri, chromosomes length
chromLenWE <- read.table(file = file.path(baseDir, "CNV", "GCdata", ref1Label, "LenChr.txt"), header = F, sep = "\t")[, 3]
chromLenNA <- read.table(file = file.path(baseDir, "CNV", "GCdata", ref2Label, "LenChr.txt"), header = F, sep = "\t")[, 3]
centrSWE <- as.numeric(read.table(file = file.path(baseDir, "Ref", "Ann",
paste0(ref1Label, ".centromere.txt")), header = F)[, 1])
centrEWE <- as.numeric(read.table(file = file.path(baseDir, "Ref", "Ann",
paste0(ref1Label, ".centromere.txt")), header = F)[, 2])
centrSNA <- as.numeric(read.table(file = file.path(baseDir, "Ref", "Ann",
paste0(ref2Label, ".centromere.txt")), header = F)[, 1])
centrENA <- as.numeric(read.table(file = file.path(baseDir, "Ref", "Ann",
paste0(ref2Label, ".centromere.txt")), header = F)[, 2])
subTelLWE <- as.numeric(read.table(file = file.path(baseDir, "Ref", "Ann", paste0(ref1Label, ".subtel.txt")))[, 1])
subTelRWE <- as.numeric(read.table(file = file.path(baseDir, "Ref", "Ann", paste0(ref1Label, ".subtel.txt")))[, 2])
subTelLNA <- as.numeric(read.table(file = file.path(baseDir, "Ref", "Ann", paste0(ref2Label, ".subtel.txt")))[, 1])
subTelRNA <- as.numeric(read.table(file = file.path(baseDir, "Ref", "Ann", paste0(ref2Label, ".subtel.txt")))[, 2])
# switch to kb
centrSWE <- centrSWE / 1000
centrEWE <- centrEWE / 1000
centrSNA <- centrSNA / 1000
centrENA <- centrENA / 1000
subTelLNA <- subTelLNA / 1000
subTelLWE <- subTelLWE / 1000
subTelRNA <- subTelRNA / 1000
subTelRWE <- subTelRWE / 1000
chromLenNA <- chromLenNA / 1000
chromLenWE <- chromLenWE / 1000
# add chromosome start (for shifting coordinates)
chromStartWE <- 0.001
chromStartNA <- 0.001
# centromere position and shift
cPosWE <- (centrSWE + centrEWE) / 2
cPosNA <- (centrSNA + centrENA) / 2
shiftNAWE <- cPosNA - cPosWE
# shifting WE (sub)telomers, chromosome start and end
subTelLWE <- subTelLWE + shiftNAWE
subTelRWE <- subTelRWE + shiftNAWE
chromLenWE <- chromLenWE + shiftNAWE
chromStartWE <- chromStartWE + shiftNAWE
# shift centromere
cPosWE <- cPosWE + shiftNAWE
ptmChr <- proc.time()
ptmGlob <- proc.time()
# all segments files path
allFiles <- list.files(pattern = ".Seg.RData$", path = dirData, recursive = T, full.names = T)
allFiles
# init variable to accumulate events @ create chr*Events
allEvVar <- c()
# write header string
headerString <- c("chr,start,first,last,end,status,len,denES,evrES,distES,denLF,evrLF,distLF,strain,hybrid,color,yVal")
write.table(x = headerString,
file = summaryCsv, append = F, sep = "", row.names = F, col.names = F, quote = F)
headerString
# carica i dati di tutti i campioni, un solo chr
chrCount <- 1
allChr
indC="ChrI"
indC="chrI"
allEv <- c()
myChrFiles <- grep(pattern = paste(".", indC, ".", sep = ""), x = allFiles, fixed = T, value = T)
myChrFiles
# files of segments by reference, chromosome, sample in sample folder under Events
# e.g. Events/A452R77/A452R77.chrI.NA.Seg.RData
for (indD in myChrFiles) {
load(indD)
bName <- basename(indD)
nameEl <- unlist(strsplit(x = bName, split = "\\."))
sampID <- nameEl[1]
refName <- nameEl[3]
# reconstruct dataframe name
evDF <- paste("ev", refName, sep = "")
# get: call an R object using a character string
nrDF <- nrow(get(evDF))
appEv <- data.frame(get(evDF), rep(refName, nrDF), rep(sampID, nrDF))
colnames(appEv)[14:15] <- c("strain", "hybrid")
allEv <- rbind(allEv, appEv)
}
View(allEv)
allEv$hybrid <- factor(x = allEv$hybrid, levels = unique(allEv$hybrid))
# plot
# add color and yVal
nrEv <- nrow(allEv)
color <- character(length = nrEv)
uniqueallEv$status)
unique(allEv$status)
allEv$status
which(allEv$status == 1)
color[which(allEv$status == 1)] <- "darkgrey"
ref1
allEv$strain
ref2
color[which(allEv$status == 0 & allEv$strain == ref1)] <- "blue"
color[which(allEv$status == 2 & allEv$strain == ref1)] <- "red"
color[which(allEv$status == 0 & allEv$strain == ref2)] <- "red"
color[which(allEv$status == 2 & allEv$strain == ref2)] <- "blue"
color <- factor(color)
color
